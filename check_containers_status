#! /usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# :copyright: (c) 2018 by Mattia Lambertini.
#
# Check_MK local check to monitor docker containers' status. 
# It monitors that all the containers are actually running and 
# didn't exit or restarting.

import docker
import sys

RETCOD = { "OK": 0, "WARNING": 1, "CRITICAL": 2, "UNKNOWN": 3}

def get_containers(client, status="running"):
    """ get all containers in the given status """
    return client.containers.list(all=True,filters={"status": status})

def main():

    result = RETCOD["OK"]
    containers_running = -1
    containers_exited= -1
    containers_restarting = -1

    try:
        client = docker.from_env()

        containers_running = len(get_containers(client, "running"))

        containers_restarting = len(get_containers(client, "restarting"))
        if containers_restarting > 0:
            result = RETCOD["WARNING"]

        containers_exited = len(get_containers(client, "exited"))
        if containers_exited > 0:
            result = RETCOD["CRITICAL"]
    except:
        result = RETCOD["UNKNOWN"]

    message = ""
    if result == RETCOD["UNKNOWN"]:
        values = (result,\
                  sys.argv[0].split("/")[-1],\
                  RETCOD.keys()[RETCOD.values().index(result)])
        message = "%i %s - %s - Some exceptions occured while running this \
check. Can you connect to the docker daemon?" % values
    else:
        values = (result,\
                  sys.argv[0].split("/")[-1],\
                  containers_running,\
                  RETCOD.keys()[RETCOD.values().index(result)],\
                  containers_exited,\
                  containers_restarting)
        message = "%i %s running_containers=%i %s - Containers Exited: %i, Restarting: %i" % values

    print (message)

    return 0


if __name__ == "__main__":
    sys.exit(main())
